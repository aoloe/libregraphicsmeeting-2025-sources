---
layout: badge-page.njk
title: Program
rootClass: badge-program
docFontSize: 7.4 # make it fit the page!
---
{%- macro renderTypeBreak(scheduleItem) -%}
{{ scheduleItem.event.title }} ({{scheduleItem.fullDurationMin}} min)
{%- endmacro -%}

{%- macro ownType(page, pos) -%}
    {%- if page.data.type -%}
      <span class="schedule_item-own_type">{{'—' if pos === 'before' else '' }}{{ page.data.type }}{{'—' if pos === 'after' else '' }}</span>
    {%- endif -%}
{%- endmacro -%}

{%- macro pageTitle(page) -%}
    <span class="schedule-item-title">{{page.data.title}}</span>
{%- endmacro -%}


{%- macro hostName(host) -%}
<span class="host-name">
{% set hostPage = collections.all | filterPage('hosts', host) %}
{%- if hostPage -%}
    {{hostPage.data.fullName}}
{%- else -%}
    {{host}}
{%- endif -%}
</span>
{%- endmacro -%}

{%- macro renderSingleEvent(scheduleItem, key) -%}
  {%- if collections.allEvents.has(key) -%}
      {% set page = collections.allEvents.get(key) %}
        {{- pageTitle(page) -}} {{- ownType(page, 'before') -}}

    {%-for host in page.data.hosts %}
      {{ hostName(host) }}
    {% endfor %}
    <!--
    {%-for label in page.data.labels %}
      <a class="label-link" href="{{rootPath}}/program/label-{{label | slugify}}">#{{label}}</a>
    {%- endfor %}
    -->
  {%- endif -%}
{%- endmacro -%}

{%- macro renderTypeTalk(scheduleItem) -%}
  {%- set key = scheduleItem.keys[0] -%}
  {{- renderSingleEvent(scheduleItem, key) -}}
{%- endmacro -%}

{%- macro renderTypeSessions(scheduleItem) -%}
  <h3>Parallel Sessions</h3>
  <ul>
  {%- for key in scheduleItem.keys -%}
  <li>{{ renderSingleEvent(scheduleItem, key) }}</li>
  {%- endfor -%}
  </ul>
{%- endmacro -%}

{%- macro renderSchedulItem(scheduleItem) -%}
  {% if scheduleItem.type === 'break' %}
    {{ renderTypeBreak(scheduleItem) }}
  {% elif ['talk', 'community', 'general', 'lightning', 'keynote'].includes(scheduleItem.type) %}
    {{ renderTypeTalk(scheduleItem) }}
  {% elif scheduleItem.type === 'sessions' %}
    {{ renderTypeSessions(scheduleItem) }}
  {% elif scheduleItem.type === 'inject' %}
    {{ scheduleItem.content }}
  {% endif %}
{%- endmacro -%}


{%- macro renderScheduleRow(timeZoneName, scheduleItem) -%}
{% set date = scheduleItem.startTime %}
<tr class="schedule_item">
    <th class="schedule_item-time">
        <time datetime="{{date.toISOString()}}">{{
          date.toLocaleTimeString('en-US', {
              hour: '2-digit',
              minute:'2-digit',
              hour12: false,
              timeZone: timeZoneName})
        }}</time>
    </th>
    <td class="schedule_item-content">
    {{ renderSchedulItem(scheduleItem) }}
    </td>
</tr>
{%- endmacro -%}


{% for dayData in dailySchedules.days %}
    {% set formattedDate = dayData.dateAndStartTime.toLocaleDateString('en-DE', {
                    weekday: "long",
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                    timeZone: dailySchedules.timeZone[1],
                    timeZoneName: 'short'
                })
    %}
    {% set day = dayData.dateAndStartTime.toLocaleDateString('en-US', { weekday: "long", timeZone: dailySchedules.timeZone[1]}) %}
    <h2>{{formattedDate}}</h2>
<table class="schedule">
    {% for scheduleItem in dayData.schedule %}
    {{ renderScheduleRow(dailySchedules.timeZone[1], scheduleItem) }}
    {% endfor %}
    {% set scheduleItem = dayData.schedule | last %}
    {% set endItem = {startTime: dayData.realEndTime, type: "inject", content: "Day's End"} %}
    {{ renderScheduleRow(dailySchedules.timeZone[1], endItem) }}
</table>
{% endfor %}
